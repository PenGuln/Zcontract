import "hashes/sha256/512bitPadded" as sha256;

def rotr32<N>(u32 x) -> u32 {
    return (x >> N) | (x << (32 - N));
}

def rotl32<N>(u32 x) -> u32 {
    return (x << N) | (x >> (32 - N));
}

def Speck<N>(u32[N][2] pt, u32[4] k) -> u32[N][2] {
    u32[N][2] mut ct = pt;
    for u32 i in 0..N {
        u32 mut b = k[0];
        u32[3] mut a = k[1..4];
        for u32 j in 0..27 {
            ct[i][1] = rotr32::<8>(ct[i][1]);
            ct[i][1] = ct[i][1] + ct[i][0];
            ct[i][1] = ct[i][1] ^ b;
            ct[i][0] = rotl32::<3>(ct[i][0]);
            ct[i][0] = ct[i][0] ^ ct[i][1];
            a[j % 3] = rotr32::<8>(a[j % 3]);
            a[j % 3] = a[j % 3] + b;
            a[j % 3] = a[j % 3] ^ j;
            b = rotl32::<3>(b);
            b = b ^ a[j % 3];
        }
    }
    return ct;
}
// 012 = RPS
def contractPriv(u32[2] val, u32[2] indata) -> (u32[2], u32) {
    u32[2] mut outVal = val;
    u32 mut out = 0;
    u32 res = indata[0] > indata[1] ? (indata[0] - indata[1]): (indata[0] - indata[1] + 3);
    u32 min = val[0] < val[1] ? val[0] : val[1];
    outVal[0] = res == 1 ? (outVal[0] + min) : res == 2 ? (outVal[0] - min) : outVal[0];
    outVal[1] = res == 2 ? (outVal[1] + min) : res == 1 ? (outVal[1] - min) : outVal[1];
    return (outVal, out);
}

def main(u32 out, u32[2][8] cm, u32[2][8] coin_, u32[2][8][2] ct, \
         private u32[2][8] s, private u32[2] val, private u32[2] indata, private u32[2][4] k, private u32[2][8] s_) {
    (u32[2], u32) result = contractPriv(val, indata);
    assert(result.0[0] + result.0[1] == val[0] + val[1]);
    assert(result.1 == out);
    for u32 i in 0..2 {
        assert(cm[i] == sha256(s[i], [0, 0, ...k[i], indata[i], val[i]]) || [val[i], indata[i], ...k[i], ...s[i], ...cm[i]] == [0; 22]);
        assert(ct[i] == Speck::<8>([s_[i][0..2], s_[i][2..4], s_[i][4..6], s_[i][6..8], [0, 0], [0, 0], [0, 0], [0, result.0[i]]], k[i]));
        assert(coin_[i] == sha256(s_[i], [0, 0, 0, 0, 0, 0, 0, result.0[i]]));
    }
}
